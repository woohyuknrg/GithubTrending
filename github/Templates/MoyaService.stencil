import Moya

{% for enum in types.implementing.MoyaService %}
extension {{ enum.name }} {
    public var path: String {
        switch self {
        {% for case in enum.cases %}
        {% if case.annotations.noPathParam %}
        case .{{ case.name }}:
            return "{{ case.annotations.path }}"
        {% elif case.hasAssociatedValue %}
        case let .{{ case.name }}({% for associatedValue in case.associatedValues %}{{ associatedValue.localName }}{% if not forloop.last %}, {% endif %}{% endfor %}):
            return "{{ case.annotations.path }}"
        {% endif %}
        {% endfor %}
        }
    }

    public var method: Moya.Method {
        switch self {
        {% for case in enum.cases %}
        {% if case.annotations.method %}
        case .{{ case.name }}:
            return .{{ case.annotations.method }}
        {% endif %}
        {% endfor %}
        default:
            return .get
        }
    }

    public var task: Moya.Task {
        var params = [String : Any]()
        var encoding: ParameterEncoding = URLEncoding.default

        switch self {
        {% for case in enum.cases|!annotated:"noParam" where case.hasAssociatedValue %}
        case .{{ case.name }}(let turple):
        {% if case.associatedValues.count == 1 %}
            params["{{ case.associatedValues.0.localName }}"] = turple
        {% else %}
        {% for associatedValue in case.associatedValues %}
            {% if not case.annotations.ignoreParamLimitIndex or forloop.counter > case.annotations.ignoreParamLimitIndex %}
            params["{{ associatedValue.localName }}"] = turple.{{ associatedValue.localName }}
            {% endif %}
        {% endfor %}
        {% endif %}
            
        {% if case.annotations.paramEncoding %}
            encoding = {{ case.annotations.paramEncoding }}.default
        {% endif %}
        {% endfor %}
        default:
            break
        }

        if !params.isEmpty {
            return .requestParameters(parameters: params, encoding: encoding)
        }
        return .requestPlain
    }

    public var sampleData: Data {
        switch self {
        case .token:
            return "Half measures are as bad as nothing at all.".data(using: .utf8)!
        case .repoSearch:
            return StubResponse.fromJSONFile("SearchResponse")
        case .trendingReposSinceLastWeek:
            return StubResponse.fromJSONFile("SearchResponse")
        case .repo(_,_):
            return "Half measures are as bad as nothing at all.".data(using: .utf8)!
        case .repoReadMe(_,_):
            return "Half measures are as bad as nothing at all.".data(using: .utf8)!
        case .pulls(_,_):
            return "[{\"title\": \"Avatar\", \"user\": { \"login\": \"me\" }, \"createdAt\": \"2011-01-26T19:01:12Z\" }]".data(using: .utf8)!
        case .issues(_,_):
            return "Half measures are as bad as nothing at all.".data(using: .utf8)!
        case .commits(_,_):
            return "Half measures are as bad as nothing at all.".data(using: .utf8)!
        }
    }

    public var headers: [String : String]? {
        switch self {
        case let .token(userString, passwordString, _, _):
            let credentialData = "\(userString):\(passwordString)".data(using: .utf8)!
            let base64Credentials = credentialData.base64EncodedString()
            return ["Authorization": "Basic \(base64Credentials)"]
        default:
            let appToken = Token()
            guard let token = appToken.token else {
                return nil
            }
            return ["Authorization": "token \(token)"]
        }
    }
}
{% endfor %}